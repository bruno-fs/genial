{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pkg_root = os.path.dirname(os.path.abspath(os.path.curdir))\n",
    "sys.path.append(pkg_root)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from extb.gff import parse\n",
    "from extb.utils import magic_open\n",
    "from extb.GenomicAnnotation import GenomicAnnotation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "planaria_example_gff = \"\"\"v31.000002      WormBase_imported       mRNA    419767  423636  .       +       .       ID=transcript:mk4.000002.13;Parent=gene:mk4.000002.13;Name=mk4\n",
    "v31.000002      WormBase_imported       exon    419767  420048  .       +       .       ID=exon:mk4.000002.13.1;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       exon    420095  420198  .       +       .       ID=exon:mk4.000002.13.2;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       exon    423322  423447  .       +       .       ID=exon:mk4.000002.13.3;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       exon    423496  423636  .       +       .       ID=exon:mk4.000002.13.4;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       five_prime_UTR  419767  419768  .       +       .       Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       CDS     419769  420048  .       +       1       ID=cds:mk4.000002.13;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       CDS     420095  420198  .       +       0       ID=cds:mk4.000002.13;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       CDS     423322  423447  .       +       0       ID=cds:mk4.000002.13;Parent=transcript:mk4.000002.13\n",
    "v31.000002      WormBase_imported       CDS     423496  423636  .       +       0       ID=cds:mk4.000002.13;Parent=transcript:mk4.000002.13\n",
    "\"\"\"\n",
    "import re\n",
    "planaria_example_gff = re.sub(r'[^\\S\\n]+', r'\\t', planaria_example_gff)\n",
    "\n",
    "# print(planaria_example_gff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "detected format gff3\n"
     ]
    }
   ],
   "source": [
    "planaria = planaria_example_gff.splitlines()\n",
    "planaria[0].split('\\t')\n",
    "gff_planaria = parse(planaria)\n",
    "gff_planaria.specie = 'Wololo'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for tranx in gff_planaria:\n",
    "    annotation = GenomicAnnotation(\n",
    "        starts=gff_planaria[tranx].exon_starts, ends=gff_planaria[tranx].exon_ends,\n",
    "        strand=gff_planaria[tranx].strand, orientation=gff_planaria.orientation,\n",
    "        cds_starts=gff_planaria[tranx].CDS_starts, cds_ends=gff_planaria[tranx].CDS_ends,\n",
    "        chrom=gff_planaria[tranx].chrom, transcript_id=gff_planaria[tranx].transcript_id,\n",
    "        gene_id=gff_planaria[tranx].gene_id\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.43010753,  0.15975423,  0.19354838,  0.21658987], dtype=float32)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "annotation.exon_contrib_to_orf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([282, 104, 126, 141])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "annotation.exons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 280.        ,  104.00000763,  126.        ,  141.        ], dtype=float32)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "annotation.exon_contrib_to_orf * annotation.orf_size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420048\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t420094\t420198\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423321\t423447\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423495\t423636\tmk4.000002.13\t1000\t+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(annotation.format('bed6'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pybedtools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "?pybedtools.BedTool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "a = pybedtools.BedTool(annotation.format('bed6'), from_string=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420048\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t420094\t420198\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423321\t423447\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423495\t423636\tmk4.000002.13\t1000\t+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(a.bed6())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(annotation.exons) + sum(annotation.introns) == annotation.end - annotation.start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# help(pybedtools.BedTool.merge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420048\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t420094\t420198\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423321\t423447\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423495\t423636\tmk4.000002.13\t1000\t+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(a.intersect(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420048\n",
      "v31.000002\t420094\t420198\n",
      "v31.000002\t423321\t423447\n",
      "v31.000002\t423495\t423636\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(a.intersect(a).merge())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420198\n",
      "v31.000002\t423321\t423636\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(a.intersect(a).merge(d=50))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([  46, 3123,   48])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "annotation.introns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420198\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423321\t423636\tmk4.000002.13\t1000\t+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(a.intersect(a).merge(d=50, c='4,5,6', o='distinct'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def bed6_to_GeneAnnot(bed6):\n",
    "     \n",
    "    lines = bed6.splitlines()\n",
    "    gannot = 0\n",
    "    for line in lines:\n",
    "        chrom, start, end, tranx_id, score, strand = line.split('\\t')\n",
    "        if gannot == 0:\n",
    "            gannot = GenomicAnnotation(start, end, strand, \n",
    "                                       chrom=chrom, transcript_id=tranx_id, starts_offset=0)\n",
    "        else:\n",
    "            gannot.starts  = np.hstack([gannot.starts, int(start)])\n",
    "            gannot.ends  = np.hstack([gannot.ends, int(end)])\n",
    "\n",
    "\n",
    "    return gannot\n",
    "\n",
    "def bed12_to_GeneAnnot(bed12):\n",
    "    \"\"\"\n",
    "    01) chrom - The name of the chromosome (e.g. chr3, chrY, chr2_random) or scaffold (e.g. scaffold10671).\n",
    "    02) chromStart - The starting position of the feature in the chromosome or scaffold. The first base in a chromosome is numbered 0.\n",
    "    03) chromEnd - The ending position of the feature in the chromosome or scaffold.\n",
    "    04) name - Defines the name of the BED line. This label is displayed to the left of the BED line in the Genome Browser window when the track is open to full display mode or directly to the left of the item in pack mode.\n",
    "    05) score - A score between 0 and 1000.\n",
    "    06) strand - Defines the strand - either '+' or '-'.\n",
    "    07) thickStart - The starting position at which the feature is drawn thickly (for example, the start codon in gene displays). When there is no thick part, thickStart and thickEnd are usually set to the chromStart position.\n",
    "    08) thickEnd - The ending position at which the feature is drawn thickly (for example, the stop codon in gene displays).\n",
    "    09) itemRgb - An RGB value of the form R,G,B (e.g. 255,0,0). If the track line itemRgb attribute is set to \"On\", this RBG value will determine the display color of the data contained in this BED line. NOTE: It is recommended that a simple color scheme (eight colors or less) be used with this attribute to avoid overwhelming the color resources of the Genome Browser and your Internet browser.\n",
    "    10) blockCount - The number of blocks (exons) in the BED line.\n",
    "    11) blockSizes - A comma-separated list of the block sizes. The number of items in this list should correspond to blockCount.\n",
    "    12) blockStarts - A comma-separated list of block starts. All of the blockStart positions should be calculated relative to chromStart. The number of items in this list should correspond to blockCount. \n",
    "    \"\"\"\n",
    "    \n",
    "    bed12 = bed12.strip()\n",
    "    bed_field = bed12.split('\\t')\n",
    "    starts = np.fromstring(bed_field[11])\n",
    "    ends = np.fromstring(bed_field[10]) + starts\n",
    "    name = bed_field[3]\n",
    "    chrom = bed_field[0]\n",
    "    strand = bed_field[5]\n",
    "    \n",
    "    return GenomicAnnotation(starts, ends, strand, chrom=chrom, transcript_id=name)\n",
    "    \n",
    "def merge_small_gap(annot, gap=20):\n",
    "    from pybedtools import BedTool\n",
    "    bed = BedTool(annot.format('bed6'), from_string=True)\n",
    "    bed_merged = bed.intersect(bed).merge(d=gap, c='4,5,6', o='distinct')\n",
    "    \n",
    "    return bed6_to_GeneAnnot(str(bed_merged))            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True,  True], dtype=bool)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bed6_to_GeneAnnot(annotation.format('bed6')).exons == annotation.exons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([282, 104, 126, 141])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_small_gap(annotation).exons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([432, 315])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "merge_small_gap(annotation, gap=50).exons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True, False,  True], dtype=bool)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "annotation.introns < 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v31.000002\t419766\t420048\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t420094\t420198\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423321\t423447\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423495\t423636\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t419766\t420048\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t420094\t420198\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423321\t423447\tmk4.000002.13\t1000\t+\n",
      "v31.000002\t423495\t423636\tmk4.000002.13\t1000\t+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(str(a) + str(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
